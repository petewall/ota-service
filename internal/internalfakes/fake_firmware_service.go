// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"sync"

	"github.com/petewall/firmware-service/lib"
	"github.com/petewall/ota-service/internal"
)

type FakeFirmwareService struct {
	GetFirmwareStub        func(string, string) (*lib.Firmware, error)
	getFirmwareMutex       sync.RWMutex
	getFirmwareArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getFirmwareReturns struct {
		result1 *lib.Firmware
		result2 error
	}
	getFirmwareReturnsOnCall map[int]struct {
		result1 *lib.Firmware
		result2 error
	}
	GetFirmwareByTypeStub        func(string) (lib.FirmwareList, error)
	getFirmwareByTypeMutex       sync.RWMutex
	getFirmwareByTypeArgsForCall []struct {
		arg1 string
	}
	getFirmwareByTypeReturns struct {
		result1 lib.FirmwareList
		result2 error
	}
	getFirmwareByTypeReturnsOnCall map[int]struct {
		result1 lib.FirmwareList
		result2 error
	}
	GetFirmwareDataStub        func(string, string) ([]byte, error)
	getFirmwareDataMutex       sync.RWMutex
	getFirmwareDataArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getFirmwareDataReturns struct {
		result1 []byte
		result2 error
	}
	getFirmwareDataReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFirmwareService) GetFirmware(arg1 string, arg2 string) (*lib.Firmware, error) {
	fake.getFirmwareMutex.Lock()
	ret, specificReturn := fake.getFirmwareReturnsOnCall[len(fake.getFirmwareArgsForCall)]
	fake.getFirmwareArgsForCall = append(fake.getFirmwareArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetFirmwareStub
	fakeReturns := fake.getFirmwareReturns
	fake.recordInvocation("GetFirmware", []interface{}{arg1, arg2})
	fake.getFirmwareMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirmwareService) GetFirmwareCallCount() int {
	fake.getFirmwareMutex.RLock()
	defer fake.getFirmwareMutex.RUnlock()
	return len(fake.getFirmwareArgsForCall)
}

func (fake *FakeFirmwareService) GetFirmwareCalls(stub func(string, string) (*lib.Firmware, error)) {
	fake.getFirmwareMutex.Lock()
	defer fake.getFirmwareMutex.Unlock()
	fake.GetFirmwareStub = stub
}

func (fake *FakeFirmwareService) GetFirmwareArgsForCall(i int) (string, string) {
	fake.getFirmwareMutex.RLock()
	defer fake.getFirmwareMutex.RUnlock()
	argsForCall := fake.getFirmwareArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirmwareService) GetFirmwareReturns(result1 *lib.Firmware, result2 error) {
	fake.getFirmwareMutex.Lock()
	defer fake.getFirmwareMutex.Unlock()
	fake.GetFirmwareStub = nil
	fake.getFirmwareReturns = struct {
		result1 *lib.Firmware
		result2 error
	}{result1, result2}
}

func (fake *FakeFirmwareService) GetFirmwareReturnsOnCall(i int, result1 *lib.Firmware, result2 error) {
	fake.getFirmwareMutex.Lock()
	defer fake.getFirmwareMutex.Unlock()
	fake.GetFirmwareStub = nil
	if fake.getFirmwareReturnsOnCall == nil {
		fake.getFirmwareReturnsOnCall = make(map[int]struct {
			result1 *lib.Firmware
			result2 error
		})
	}
	fake.getFirmwareReturnsOnCall[i] = struct {
		result1 *lib.Firmware
		result2 error
	}{result1, result2}
}

func (fake *FakeFirmwareService) GetFirmwareByType(arg1 string) (lib.FirmwareList, error) {
	fake.getFirmwareByTypeMutex.Lock()
	ret, specificReturn := fake.getFirmwareByTypeReturnsOnCall[len(fake.getFirmwareByTypeArgsForCall)]
	fake.getFirmwareByTypeArgsForCall = append(fake.getFirmwareByTypeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetFirmwareByTypeStub
	fakeReturns := fake.getFirmwareByTypeReturns
	fake.recordInvocation("GetFirmwareByType", []interface{}{arg1})
	fake.getFirmwareByTypeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirmwareService) GetFirmwareByTypeCallCount() int {
	fake.getFirmwareByTypeMutex.RLock()
	defer fake.getFirmwareByTypeMutex.RUnlock()
	return len(fake.getFirmwareByTypeArgsForCall)
}

func (fake *FakeFirmwareService) GetFirmwareByTypeCalls(stub func(string) (lib.FirmwareList, error)) {
	fake.getFirmwareByTypeMutex.Lock()
	defer fake.getFirmwareByTypeMutex.Unlock()
	fake.GetFirmwareByTypeStub = stub
}

func (fake *FakeFirmwareService) GetFirmwareByTypeArgsForCall(i int) string {
	fake.getFirmwareByTypeMutex.RLock()
	defer fake.getFirmwareByTypeMutex.RUnlock()
	argsForCall := fake.getFirmwareByTypeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFirmwareService) GetFirmwareByTypeReturns(result1 lib.FirmwareList, result2 error) {
	fake.getFirmwareByTypeMutex.Lock()
	defer fake.getFirmwareByTypeMutex.Unlock()
	fake.GetFirmwareByTypeStub = nil
	fake.getFirmwareByTypeReturns = struct {
		result1 lib.FirmwareList
		result2 error
	}{result1, result2}
}

func (fake *FakeFirmwareService) GetFirmwareByTypeReturnsOnCall(i int, result1 lib.FirmwareList, result2 error) {
	fake.getFirmwareByTypeMutex.Lock()
	defer fake.getFirmwareByTypeMutex.Unlock()
	fake.GetFirmwareByTypeStub = nil
	if fake.getFirmwareByTypeReturnsOnCall == nil {
		fake.getFirmwareByTypeReturnsOnCall = make(map[int]struct {
			result1 lib.FirmwareList
			result2 error
		})
	}
	fake.getFirmwareByTypeReturnsOnCall[i] = struct {
		result1 lib.FirmwareList
		result2 error
	}{result1, result2}
}

func (fake *FakeFirmwareService) GetFirmwareData(arg1 string, arg2 string) ([]byte, error) {
	fake.getFirmwareDataMutex.Lock()
	ret, specificReturn := fake.getFirmwareDataReturnsOnCall[len(fake.getFirmwareDataArgsForCall)]
	fake.getFirmwareDataArgsForCall = append(fake.getFirmwareDataArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetFirmwareDataStub
	fakeReturns := fake.getFirmwareDataReturns
	fake.recordInvocation("GetFirmwareData", []interface{}{arg1, arg2})
	fake.getFirmwareDataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirmwareService) GetFirmwareDataCallCount() int {
	fake.getFirmwareDataMutex.RLock()
	defer fake.getFirmwareDataMutex.RUnlock()
	return len(fake.getFirmwareDataArgsForCall)
}

func (fake *FakeFirmwareService) GetFirmwareDataCalls(stub func(string, string) ([]byte, error)) {
	fake.getFirmwareDataMutex.Lock()
	defer fake.getFirmwareDataMutex.Unlock()
	fake.GetFirmwareDataStub = stub
}

func (fake *FakeFirmwareService) GetFirmwareDataArgsForCall(i int) (string, string) {
	fake.getFirmwareDataMutex.RLock()
	defer fake.getFirmwareDataMutex.RUnlock()
	argsForCall := fake.getFirmwareDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirmwareService) GetFirmwareDataReturns(result1 []byte, result2 error) {
	fake.getFirmwareDataMutex.Lock()
	defer fake.getFirmwareDataMutex.Unlock()
	fake.GetFirmwareDataStub = nil
	fake.getFirmwareDataReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFirmwareService) GetFirmwareDataReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getFirmwareDataMutex.Lock()
	defer fake.getFirmwareDataMutex.Unlock()
	fake.GetFirmwareDataStub = nil
	if fake.getFirmwareDataReturnsOnCall == nil {
		fake.getFirmwareDataReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getFirmwareDataReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFirmwareService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFirmwareMutex.RLock()
	defer fake.getFirmwareMutex.RUnlock()
	fake.getFirmwareByTypeMutex.RLock()
	defer fake.getFirmwareByTypeMutex.RUnlock()
	fake.getFirmwareDataMutex.RLock()
	defer fake.getFirmwareDataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFirmwareService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.FirmwareService = new(FakeFirmwareService)
