// Code generated by counterfeiter. DO NOT EDIT.
package libfakes

import (
	"sync"

	"github.com/petewall/ota-service/v2/lib"
)

type FakeFirmwareService struct {
	GetFirmwareStub        func(string, string) (*lib.Firmware, error)
	getFirmwareMutex       sync.RWMutex
	getFirmwareArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getFirmwareReturns struct {
		result1 *lib.Firmware
		result2 error
	}
	getFirmwareReturnsOnCall map[int]struct {
		result1 *lib.Firmware
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFirmwareService) GetFirmware(arg1 string, arg2 string) (*lib.Firmware, error) {
	fake.getFirmwareMutex.Lock()
	ret, specificReturn := fake.getFirmwareReturnsOnCall[len(fake.getFirmwareArgsForCall)]
	fake.getFirmwareArgsForCall = append(fake.getFirmwareArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetFirmwareStub
	fakeReturns := fake.getFirmwareReturns
	fake.recordInvocation("GetFirmware", []interface{}{arg1, arg2})
	fake.getFirmwareMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirmwareService) GetFirmwareCallCount() int {
	fake.getFirmwareMutex.RLock()
	defer fake.getFirmwareMutex.RUnlock()
	return len(fake.getFirmwareArgsForCall)
}

func (fake *FakeFirmwareService) GetFirmwareCalls(stub func(string, string) (*lib.Firmware, error)) {
	fake.getFirmwareMutex.Lock()
	defer fake.getFirmwareMutex.Unlock()
	fake.GetFirmwareStub = stub
}

func (fake *FakeFirmwareService) GetFirmwareArgsForCall(i int) (string, string) {
	fake.getFirmwareMutex.RLock()
	defer fake.getFirmwareMutex.RUnlock()
	argsForCall := fake.getFirmwareArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirmwareService) GetFirmwareReturns(result1 *lib.Firmware, result2 error) {
	fake.getFirmwareMutex.Lock()
	defer fake.getFirmwareMutex.Unlock()
	fake.GetFirmwareStub = nil
	fake.getFirmwareReturns = struct {
		result1 *lib.Firmware
		result2 error
	}{result1, result2}
}

func (fake *FakeFirmwareService) GetFirmwareReturnsOnCall(i int, result1 *lib.Firmware, result2 error) {
	fake.getFirmwareMutex.Lock()
	defer fake.getFirmwareMutex.Unlock()
	fake.GetFirmwareStub = nil
	if fake.getFirmwareReturnsOnCall == nil {
		fake.getFirmwareReturnsOnCall = make(map[int]struct {
			result1 *lib.Firmware
			result2 error
		})
	}
	fake.getFirmwareReturnsOnCall[i] = struct {
		result1 *lib.Firmware
		result2 error
	}{result1, result2}
}

func (fake *FakeFirmwareService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFirmwareMutex.RLock()
	defer fake.getFirmwareMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFirmwareService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lib.FirmwareService = new(FakeFirmwareService)
